{"version":3,"sources":["assets/freak.jpg","Components/Header.js","Components/Section.js","Components/Loader.js","Components/Message.js","Components/Poster.js","Routes/Home/HomePresenter.js","api.js","Routes/Home/index.js","Routes/Home/HomeContainer.js","Routes/TV/TVPresenter.js","Routes/TV/index.js","Routes/TV/TVContainer.js","Routes/Search/SearchPresenter.js","Routes/Search/index.js","Routes/Search/SearchContainer.js","Routes/Detail/DetailPresenter.js","Routes/Detail/index.js","Routes/Detail/DetailContainer.js","Components/Router.js","Components/GlobalStyles.js","Components/App.js","index.js"],"names":["module","exports","Header","styled","header","List","ul","Item","li","props","current","SLink","Link","withRouter","pathname","location","to","Container","div","Title","span","Grid","Section","title","children","role","aria-label","Text","Error","text","color","Image","bgUrl","Rating","ImageContainer","Year","Poster","id","imageUrl","rating","year","isMovie","require","length","substring","HomePresenter","nowPlaying","popular","upcoming","loading","error","Loader","Helmet","map","movie","key","original_title","vote_average","poster_path","release_date","Message","api","axios","create","baseURL","params","api_key","language","moviesApi","get","append_to_response","term","query","encodeURIComponent","tvApi","HomeContainer","state","data","results","this","setState","React","Component","TVPresenter","topRated","airingToday","show","original_name","first_air_date","name","TVContainer","console","log","Form","form","Input","input","SearchPresenter","movieResults","tvResults","searchTerm","handleSubmit","updateTerm","onSubmit","placeholder","value","onChange","SearchContainer","event","preventDefault","searchByTerm","target","a","Backdrop","bgImage","Content","Cover","Data","h3","ItemContainer","Divider","Overview","p","DetailPresenter","backdrop_path","runtime","episode_run_time","genres","genre","index","overview","DetailContainer","result","includes","match","push","history","intgerID","parseInt","isNaN","request","path","exact","component","Home","TV","Search","Detail","from","globalStyles","createGlobalStyle","reset","App","Router","GlobalStyles","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0fc2ab3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/freak.cd4d541a.jpg\";","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nconst Header = styled.header`\n  color: white;\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 50px;\n  display: flex;\n  align-items: center;\n  background-color: rgba(20, 20, 20, 0.8);\n  z-index: 10;\n  box-shadow: 0px 1px 5px 2px rgba(0, 0, 0, 0.8);\n`;\n\nconst List = styled.ul`\n  display: flex;\n`;\n\nconst Item = styled.li`\n  width: 80px;\n  height: 50px;\n  text-align: center;\n  border-bottom: 3px solid\n    ${props => (props.current ? \"#3498db\" : \"transparent\")};\n  transition: border-bottom 0.5s ease-in-out;\n`;\n\n\n//styled-component를 사용해서, router의 요소인 Link를 사용하는법.\n//Router 본연의 기능인 Link에 style 을 append하여 사용하기위해서 SLINK라는 새로운 이름으로 처리하였다.\nconst SLink = styled(Link)`\n  height: 50px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\n\n//withRouter은 Component를 감싸는 녀석이다.\n//이 Header을 외부에서 부르면 default로 withRouter이 불리게되는데 부르는 놈의 props를 withRouter을 통해서 받아올 수 있다.\n//따라서 부를시점의 pathname을 가져오면, 링크에따라 어떤 페이지를 렌더링 할지 알고리즘을 정할 수 있다.\nexport default withRouter(({ location: { pathname } }) => (\n  <Header>\n    <List>\n      <Item current={pathname === \"/\"}>\n        <SLink to=\"/\">Movies</SLink>\n      </Item>\n      <Item current={pathname === \"/tv\"}>\n        <SLink to=\"/tv\">TV</SLink>\n      </Item>\n      <Item current={pathname === \"/search\"}>\n        <SLink to=\"/search\">Search</SLink>\n      </Item>\n    </List>\n  </Header>\n));","import React from 'react';\nimport PropTypes from \"prop-types\"; //이거 대문자 하나 안지켜서 노가다함\nimport styled from 'styled-components';\n\n\nconst Container = styled.div`\n\n    :not(:last-child) {\n    margin-bottom: 50px;\n    }\n\n`;\n\nconst Title = styled.span`\n    font-size: 14px;\n   font-weight: 600;\n`;\n\nconst Grid = styled.div`\n    margin-top :25px;\n    display : grid;\n    grid-template-columns:repeat(auto-fill,125px);\n    grid-gap :25px;\n    `;\n\n\nconst Section =({title,children})=>(\n\n    <Container>\n        <Title>{title}</Title>\n        <Grid>{children}</Grid>\n    </Container>\n)\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.oneOfType([\n      PropTypes.arrayOf(PropTypes.node),\n      PropTypes.node\n    ])\n  };\nexport default Section;\n\n\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n\nheight :100vh;\nwidth:100vw;\ndisplay:flex;\njustify-contents:center;\n\n`;\n\nexport default ()=>\n<Container>\n<span role=\"img\" aria-label=\"Loading\">\n   \"Loading!!!!!!!\" \n</span>\n</Container>\n\n\n\n//load 가 항상되야함 .length, .map 같은건 반드시 stage 를 loading,loaded 두단계로 생각을하자!!!\n\n","import React from 'react';\nimport Proptypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    width : 100vw;\n    display : flex;             //div는 기본적으로 display block인데\n    justify-contents : center;   \n`;\n\nconst Text = styled.span`\n\n    color : &{props.color};         //color을 props를 통해서 받아왔다.\n    font-weight : 600;\n`;\n\nconst Error =({text,color}) => (\n\n    <Container>\n        <Text color={color}>{text}</Text>\n    </Container>    \n)\n\n\nError.propTypes={\n    text:Proptypes.string.isRequired,\n    color:Proptypes.string.isRequired\n}\n\nexport default Error;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    font-size:12px;\n`;\n\n//Image Component에서는 밑에서 bgUrl값으로 받았으니까. \nconst Image = styled.div`\nbackground-image: url(${props => props.bgUrl});\nheight: 180px;\nbackground-size: cover;\nborder-radius: 4px;\nbackground-position: center center;\ntransition: opacity 0.1s linear;\n`;\n\n\n\nconst Rating = styled.span`\nbottom: 5px;\nright: 5px;\nposition: absolute;\nopacity: 0;\ntransition: opacity 0.1s linear;\n`;\n\n\nconst ImageContainer = styled.div`\n   margin-bottom: 5px;\n   position: relative;\n   &:hover {\n     ${Image} {\n       opacity: 0.3;\n     }\n     ${Rating} {\n       opacity: 1;\n     }\n   }\n `;\n\nconst Title = styled.span`\ndisplay : block;\nmargin-bottom:3px;\n `;\n\n const Year = styled.span`\n font-size :10px;\n color : rgba{255,255,255,0.5};\n `;\n\n//id를 받아야지 해당 url로 보내버릴거아니야. 지금 해당 url로 보내버리고 거기 렌더링 하는거임\n const Poster = ({ id, imageUrl, title, rating, year, isMovie = false }) => (\n    <Link to={isMovie ? `/movie/${id}` : `/show/${id}`}>    \n      <Container>\n        <ImageContainer>\n          <Image bgUrl={imageUrl ? `https://image.tmdb.org/t/p/w300${imageUrl}` : require(\"../assets/freak.jpg\")} />\n          <Rating>\n            <span role=\"img\" aria-label=\"rating\">\n              ⭐️\n            </span>{\" \"}\n            {rating}/10\n          </Rating>\n        </ImageContainer>\n        <Title>{title.length > 18 ? `${title.substring(0,18)}...`:title}</Title>\n        <Year>{year}</Year>\n      </Container>\n    </Link>\n  );\n \n  Poster.propTypes = {\n    id: PropTypes.number.isRequired,\n    imageUrl: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    rating: PropTypes.number,\n    year: PropTypes.string,\n    isMovie: PropTypes.bool\n  };\n\nexport default Poster;","\nimport React from 'react';\nimport Proptypes from 'prop-types';         //받아오는 props의 parameter형식을 받아옴.\nimport styled from 'styled-components';\nimport Section from \"Components/Section\";\nimport Loader from \"Components/Loader\";\nimport Message from \"Components/Message\";\nimport Poster from \"Components/Poster\";\nimport Helmet from \"react-helmet\";\n\n    const Container = styled.div`\n      padding: 20px;\n      padding-top: 20px;\n    `;\n   \n\n    //HomePresenter은 HomeContainer로부터 해당 parameter들을 props로 받아온 후 회면에 직접렌더링(상위레벨로 리턴)한다.\n    const HomePresenter = ({ nowPlaying, popular, upcoming, loading, error }) =>\n      loading ? <Loader /> : (                                                            //Loading이 False가되면!!!\n        <Container>\n            <Helmet><title>SidFlix | Movie</title></Helmet>\n          {nowPlaying && nowPlaying.length > 0 && ( //nowPlaying값이 있고, nowPlaying의 길이가 길면, \n            <Section title=\"Now Playing\">\n              {nowPlaying.map(movie=>(\n                //   <span key={movie.id}>\n                //   {movie.title}\n                //   </span>\n                <Poster key={movie.id} id={movie.id} \n                title={movie.original_title} rating={movie.vote_average} \n                imageUrl={movie.poster_path} \n                year={movie.release_date&&movie.release_date.substring(0,4)}    // 반드시 이 변수가 null이 아니도록!\n                isMovie={true}/>\n              ))} \n            </Section>\n          )}\n          {upcoming && upcoming.length > 0 && (\n            <Section title=\"Upcoming Movies\">\n              {upcoming.map(movie => (\n                //   <span key={movie.id}>\n                //   {movie.title}\n                //    </span> \n                <Poster key={movie.id} id={movie.id} \n                title={movie.original_title} rating={movie.vote_average} \n                imageUrl={movie.poster_path} \n                year={movie.release_date&&movie.release_date.substring(0,4)}    // 반드시 이 변수가 null이 아니도록!\n                isMovie={true}/>\n                  ))}\n            </Section>\n          )}\n          {popular && popular.length > 0 && (\n            <Section title=\"Popular Movies\">\n                {popular.map(movie => (\n              /* {popular.map(movie => movie.title)} */\n              <Poster key={movie.id} id={movie.id} \n                title={movie.original_title} rating={movie.vote_average} \n                imageUrl={movie.poster_path} \n                year={movie.release_date&&movie.release_date.substring(0,4)}    // 반드시 이 변수가 null이 아니도록!\n                isMovie={true}/>\n                ))}\n            </Section>\n          )}\n        {\n            error&&(<Message color=\"#e74c3c\" text={error} />)\n        }\n        </Container>\n      );\n\nHomePresenter.propTypes ={                          //반드시 여기서 대소문자를 잘지켜야한다.\n    nowPlaying : Proptypes.array,\n    upcoming : Proptypes.array,\n    popular : Proptypes.array,\n    error : Proptypes.string,\n    loading : Proptypes.bool.isRequired\n}\n\nexport default HomePresenter;       //반드시 HomePresenter Export 해주야지 이전에는 HomePresenter 이 없었으니까 그렇게 한거고\n\n\n","import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"https://api.themoviedb.org/3/\",\n  params: {\n    api_key: \"10923b261ba94d897ac6b81148314a3f\",\n    language: \"en-US\"\n  }\n});\n\nexport const moviesApi = {\n  nowPlaying: () => api.get(\"movie/now_playing\"),\n  upcoming: () => api.get(\"movie/upcoming\"),\n  popular: () => api.get(\"movie/popular\"),\n  movieDetail: id =>\n    api.get(`movie/${id}`, {\n      params: {\n        append_to_response: \"videos\"\n      }\n    }),\n  search: term =>\n    api.get(\"search/movie\", {\n      params: {\n        query: encodeURIComponent(term)\n      }\n    })\n};\n\nexport const tvApi = {\n  topRated: () => api.get(\"tv/top_rated\"),\n  popular: () => api.get(\"tv/popular\"),\n  airingToday: () => api.get(\"tv/airing_today\"),\n  showDetail: id =>\n    api.get(`tv/${id}`, {\n      params: {\n        append_to_response: \"videos\"\n      }\n    }),\n  search: term =>\n    api.get(\"search/tv\", {\n      params: {\n        query: encodeURIComponent(term)\n      }\n    })\n};","import HomeContainer from \"./HomeContainer\"\n\n\n//Router에서 Home Component를 부르면 default로 HomeContainer을 export한다.\nexport default HomeContainer;","import React from \"react\";\nimport HomePresenter from \"./HomePresenter\";\nimport { moviesApi } from \"api\";\n\n export default class extends React.Component {\n   state = {\n     loading: true\n   };\n\n   async componentDidMount() {\n\n     try {\n       const {\n         data: { results: nowPlaying }      //results 라는 props의 이름을 nowPlaying으로 바꿨음\n       } = await moviesApi.nowPlaying();    //async-await 하면 자바스크립트가 api 결과가 리턴될때까지(그것이 성공이든 실패든) 기다려준다.\n       const {\n           data: { results: upcoming }\n        } = await moviesApi.upcoming();\n        const {\n            data: { results: popular }\n        } = await moviesApi.popular();\n        \n        \n        //받아온 api값으로 state로 \n            this.setState({\n              nowPlaying,\n              upcoming,\n              popular\n            });\n     } catch {\n       this.setState({\n         error: \"Can't find movies information.\"\n       });\n     } finally {\n       this.setState({\n         loading: false\n       });\n     }\n   }\n\n   render() {\n       //state로부터 변수값들을 받아온다음에, Home Presenter로 값을 넘겨버린다.\n     const { nowPlaying, upcoming, popular, error, loading } = this.state;\n     return (\n      <HomePresenter\n        nowPlaying={nowPlaying}\n        upcoming={upcoming}\n        popular={popular}\n        error={error}\n        loading={loading}\n      />\n    );\n  }\n\n\n}","import React from 'react';\nimport Proptypes from 'prop-types';\nimport styled from 'styled-components';\nimport Section from \"../../Components/Section\";\nimport Loader from \"../../Components/Loader\";\nimport Message from \"Components/Message\";\nimport Poster from \"Components/Poster\";\nimport Helmet from \"react-helmet\";\n\nconst Container=styled.div`\npadding : 10px;\n`;\n\n\nconst TVPresenter =({topRated,\n    airingToday,\n    popular,\n    error,loading})=>loading ? (<Loader />):\n(<Container>\n    <Helmet><title>Sidflix | TV</title></Helmet>\n\n{topRated&&topRated.length>0&&                  //topRated 가 정상적으로 들어오면,  // return하는 부분만 span했어야지!! \n(<Section title =\"TopRated Shows\">              \n{topRated.map(show=> \n                <Poster key={show.id} id={show.id} \n                title={show.original_name} rating={show.vote_average} \n                imageUrl={show.poster_path} \n                year={show.first_air_date&&show.first_air_date.substring(0,4)}    // 반드시 이 변수가 null이 아니도록!\n                isMovie={false}/>)}\n</Section>)}\n\n{popular&&popular.length>0&&                //Section에 prop으로 title 과 Children 전달했다. \n(<Section title =\"Popular Shows\">   \n{popular.map(show=> \n                <Poster key={show.id} id={show.id} \n                title={show.original_name} rating={show.vote_average} \n                imageUrl={show.poster_path} \n                year={show.first_air_date&&show.first_air_date.substring(0,4)}    // 반드시 이 변수가 null이 아니도록!\n                isMovie={false}/>)}       \n</Section>)}\n\n{airingToday&&airingToday.length>0&&\n(<Section title =\"Airing Today\">\n{airingToday.map(show=>show.name)}\n</Section>)}\n\n{error&&(<Message color=\"#e74c3c\" text={error} />)}            \n\n</Container>);\n\n//얘를 왜 반드시 객체로 싸 줘야되지????\n\n\nTVPresenter.propTypes ={\n    topRated : Proptypes.array,\n    airingToday : Proptypes.array,\n    popular : Proptypes.array,\n    error : Proptypes.string,\n    loading : Proptypes.bool.isRequired\n}\nexport default TVPresenter;","import TVContainer from \"./TVContainer\"\n\nexport default TVContainer;","import React from \"react\";\nimport TVPresenter from \"./TVPresenter.js\";\nimport {tvApi} from \"api\";\n\nexport default class extends React.Component{\n\n    state={\n        topRated:null,\n        airingToday:null,\n        popular:null,\n        error: null,\n        loading: true\n    }\n\n    async componentDidMount(){\n\n        try {\n            // lst 를 가져오기 \n            const {data :{results : topRated}} = await tvApi.topRated();    //state 안의 값들에 데이터를 직접 넣었구나.\n            const {data :{results : airingToday}} = await tvApi.airingToday();\n            const {data :{results : popular}} = await tvApi.popular();\n//            throw Error();\n\n            this.setState(\n                {topRated : topRated,\n                    airingToday : airingToday,\n                    popular : popular\n                 }\n            )\n     \n        } catch (error) {\n            this.setState(\n                {\n                    error : \"Something not gone correct\"\n                }\n            )\n        } finally{\n            this.setState(\n                {\n                    loading : false\n                }\n            )\n        }\n\n    }\n\n    render(){\n        const {topRated, airingToday, popular,error,loading}=this.state;\n        console.log(this.state);\n        return <TVPresenter \n        topRated={topRated}\n        airingToday={airingToday}\n        popular={popular}\n        error={error}\n        loading={loading}\n        />\n    }\n\n}","import React from 'react';\nimport Proptypes from 'prop-types';\nimport styled from 'styled-components';\nimport Section from \"Components/Section\";\nimport Loader from \"Components/Loader\";\nimport Message from \"Components/Message\";\nimport Poster from \"Components/Poster\";\nimport Helmet from \"react-helmet\";\nconst Container = styled.div`\n    padding : 0px 20px;\n`;\nconst Form = styled.form`\n    margin-bottom : 50px;\n    width: 100%;\n`;\nconst Input = styled.input`\n    all: unset;     //input 에 unset 하면 background color 기본값 제거\n    font-size : 30px;\n    width: 100%;\n`;\n\n\n//만약 value에 searchTerm을 주지 않았더라면, 자바스크립트로 SearchTerm들을 컨트롤 하지 못하게 된다.\nconst SearchPresenter =({movieResults,\n    tvResults,\n    searchTerm,\n    error,\n    loading,\n    handleSubmit,\n    updateTerm\n})=>(\n<Container>\n    <Form onSubmit={handleSubmit}>\n        <Input placeholder=\"Search Movies or TV Shows..\" value={searchTerm} onChange={updateTerm}/> \n    \n    </Form>\n    {loading ? (\n       <Loader />\n     ) : (\n       <>\n         {movieResults && movieResults.length > 0 && (\n           <Section title=\"Movie Results\">\n               <Helmet><title>Sidflix | Movie Search</title></Helmet>\n             {movieResults.map(movie => (\n                <Poster key={movie.id} id={movie.id} \n                title={movie.original_title} rating={movie.vote_average} \n                imageUrl={movie.poster_path} \n                year={movie.release_date&&movie.release_date.substring(0,4)}    // 반드시 이 변수가 null이 아니도록!\n                isMovie={true}/>\n             ))}\n           </Section>\n         )}\n         {tvResults && tvResults.length > 0 && (\n           <Section title=\"TV Show Results\">\n               <Helmet><title>Sidflix | TV Search</title></Helmet>\n             {tvResults.map(show =>  <Poster key={show.id} id={show.id} \n                title={show.original_name} rating={show.vote_average} \n                imageUrl={show.poster_path} \n                year={show.first_air_date&&show.first_air_date.substring(0,4)}    // 반드시 이 변수가 null이 아니도록!\n                isMovie={false}/>)}\n           </Section>\n         )}\n         {error&&(<Message color=\"#e74c3c\" text={error} />)}\n\n         {tvResults&& movieResults &&\n           tvResults.length === 0 &&\n           movieResults.length === 0 && (\n             <Message text=\"Nothing found\" color=\"#95a5a6\" />\n           )}\n       </>\n     )}\n</Container>\n\n);\n\n\nSearchPresenter.propTypes ={\n    movieResults : Proptypes.array,\n    tvResults : Proptypes.array,\n    searchTerm : Proptypes.string,\n    error : Proptypes.string,\n    loading : Proptypes.bool.isRequired,\n    handleSubmit : Proptypes.func.isRequired,\n    updateTerm : Proptypes.func.isRequired\n}\nexport default SearchPresenter;","import SearchContainer from \"./SearchContainer\"\n\nexport default SearchContainer;","import React from \"react\";\n import SearchPresenter from \"./SearchPresenter\";\n import { moviesApi, tvApi } from \"../../api\";\n\n export default class extends React.Component {\n   state = {\n    movieResults: null,\n    tvResults: null,\n    searchTerm: \"\",\n    loading: false,\n     error: null,\n   };\n\n   //handleSubmit 이라는 함수를 Presenter한테 넘겨줌으로써 Search기능이 불려지도록 구현하였다. !!!!!\n   //handleSubmit 은 React의 event 로 인해서 불리는 함수이기 때문에, 특정 event가 handleSubmit으로 날아오게될 것이 자명하다.\n   handleSubmit = (event) => {\n     event.preventDefault(); //Submit시에 자동으로 날아가는것(refresh)이 Default였지만 그것을 막아버림\n     const { searchTerm } = this.state; //Search Container의 Props를 가져와서\n     if (searchTerm !== \"\") {\n       this.searchByTerm(); //반칸이 아니면 SearchByTerm 호출\n     }\n   };\n\n//updateTerm함수가 불릴때마다, 한글자한글자마다 state의 searchTerm에다가 넣어서 저장하게된다. 그래서 두글자 이상이 input창에 입력될수 있는것이다.\n   updateTerm =(event)=>{\n    const {target:{value}}=event;\n    console.log(value); \n      this.setState({\n        searchTerm:value\n      })\n    };\n\n   //0806 당연한거... ComponentDidMount를 해야지 이 SearchContainer Component가 생성이될때 SearchByTerm이 불리지.. 안그러면 안불려..\n   /*componentDidMount(){\n     this.searchByTerm();\n   }\n   */\n\n   searchByTerm = async () => {\n     const { searchTerm } = this.state; //Props:SearchTerm 가져와서\n\n     this.setState({ loading: true });\n\n     try {\n       const {\n         data: { results: movieResults }\n       } = await moviesApi.search(searchTerm);\n\n       const {\n         data: { results: tvResults }\n       } = await tvApi.search(searchTerm);\n\n       this.setState({\n         movieResults,\n         tvResults\n       });\n     } catch {\n       this.setState({ error: \"Can't find results.\" });\n     } finally {\n       this.setState({ loading: false });\n     }\n   };\n\n   render() {\n     const { movieResults, tvResults, searchTerm, loading, error } = this.state;\n    \n //    console.log(this.state);\n     return (\n      <SearchPresenter\n        movieResults={movieResults}\n        tvResults={tvResults}\n         searchTerm={searchTerm}\n         loading={loading}\n         error={error}\n         handleSubmit={this.handleSubmit}\n         updateTerm={this.updateTerm}\n       />\n     );\n   }\n  }","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport Loader from \"Components/Loader\";\nimport {Link} from \"react-router-dom\";\n//import YouTube from 'react-youtube';\n\nconst Container = styled.div`\n  height: calc(100vh - 50px);\n  width: 100%;\n  position: relative;\n  padding: 50px;\n`;\nconst Backdrop = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-image: url(${props => props.bgImage});\n  background-position: center center;\n  background-size: cover;\n  filter: blur(3px);\n  opacity: 0.5;\n  z-index: 0;\n`;\nconst Content = styled.div`\n  display: flex;\n  width: 100%;\n  position: relative;\n  z-index: 1;\n  height: 100%;\n`;\nconst Cover = styled.div`\n  width: 30%;\n  background-image: url(${props => props.bgImage});\n  background-position: center center;\n  background-size: cover;\n  height: 100%;\n   border-radius: 5px;\n `;\n\n const Data = styled.div`\n   width: 70%;\n   margin-left: 10px;\n `;\n\n const Title = styled.h3`\n   font-size: 32px;\n `;\n\n const ItemContainer = styled.div`\n   margin: 20px 0;\n `;\n\n const Item = styled.span``;\n\n const Divider = styled.span`\n   margin: 0 10px;\n `;\n\n const Overview = styled.p`\n   font-size: 12px;\n   opacity: 0.7;\n   line-height: 1.5;\n   width: 50%;\n `;\n const VideoLinkButton=styled.div`\n width: 250px;\n background-image: url(${props => props.bgImage});\n background-position: right bottom;\n background-size: cover;\n height: 300px;\n  border-radius: 5px;\n  opacity:1;\n `;\n\n const DetailPresenter = ({ results, loading, error }) =>\n   loading ? (\n     <Loader />\n  ) : (\n    <Container>\n      <Backdrop\n        bgImage={`https://image.tmdb.org/t/p/original${results.backdrop_path}`}\n      />\n      <Content>\n        <Cover\n          bgImage={\n            results.poster_path\n              ? `https://image.tmdb.org/t/p/original${results.poster_path}`\n               : require(\"../../assets/freak.jpg\")\n           }\n         />\n         <Data>\n           <Title>\n             {results.original_title\n               ? results.original_title\n               : results.original_name}\n           </Title>\n           <ItemContainer>\n             <Item>\n               {results.release_date\n                 ? results.release_date.substring(0, 4)\n                 : results.first_air_date.substring(0, 4)}\n             </Item>\n             <Divider>•</Divider>\n             <Item>\n               {results.runtime ? results.runtime : results.episode_run_time[0]} min\n             </Item>\n             <Divider>•</Divider>\n             <Item>\n               {results.genres &&\n                 results.genres.map((genre, index) =>\n                   index === results.genres.length - 1\n                     ? genre.name\n                     : `${genre.name} / `\n                 )}\n             </Item>\n             <Divider>•</Divider>\n             <Item>\n                 {                      // 변수와 문자를 같이 출력하고싶을때 항상이런식으로!!!! 백틱과$\n                     results.vote_average?` ⭐️  ${results.vote_average} / 10` :<span>no votes</span>\n                 }\n            </Item>\n           </ItemContainer>\n           <Overview>{results.overview}</Overview>\n           {/* <Link to=\"https://www.naver.com\">\n           <VideoLinkButton bgImage={\n            results.production_companies.logo_path\n //             ? `https://image.tmdb.org/t/p/w300${results.production_companies.logo_path}`\n                require(\"../../assets/freak.jpg\")\n           }/>\n           </Link> */}\n         </Data>\n       </Content>\n     </Container>\n   );\n\n   export default DetailPresenter;","import DetailContainer from \"./DetailContainer\"\n\nexport default DetailContainer;","import React from \"react\";\nimport DetailPresenter from \"./DetailPresenter\";\nimport { moviesApi, tvApi } from \"api\";\n\n\n//DetailContainer도 Component이므로 render()을 반드시 재정의해줘야한다.\nexport default class extends React.Component {\n\n\n    \nconstructor(props){\n        super(props);   //super(props)를 사용해서 부모 컴포넌트인 React의 Component props를 받아온것이다.\n        const {location:{pathname}} =props;\n//       console.log(props);                //router의 props임. 지금 현재위치를 때려잡아줄수있음 (어렵긴하네) \n//       console.log(this.props);           //똑같긴하더라\n        this.state = {                              //constructor 안에서는 this.state을 해줘야한다. \n            result: null,\n            error: null,\n            loading: true,\n            isMovie : pathname.includes(\"/movie/\")\n        }\n  };\n\n  async componentDidMount(){\n //   console.log(this.props);\n    const {match:{params:{id}}, history : {push},\n    } =this.props\n    const {isMovie} = this.state;\n//    const isMovie = pathname.includes(\"movie\");\n    const intgerID = parseInt(id);\n    if(isNaN(intgerID)){\n        //일단 return을 안하면 사용자를 다른페이지로 보내버리고 자바스크립트는 아래 있는 내용들을 실행해버린다.\n        //push 는 react router 의 기능임!!!!!!!!!\n        return push(\"/\");        //이렇게 함으로써 깔끔하게 함수가 재시작 되도록 한다. 근데 정확히 시점이 어떻게되지? push가 url 넣고 render해주나?\n    }\n\n\n    let results = null; //movie 든 tv든 계속 덮어쓸것이기때문에\n    try {\n        if(isMovie){\n //           const request = await moviesApi.movieDetail(intgerID);\n            ({data : results}=await moviesApi.movieDetail(intgerID)) //  이거 한줄로 처리도 가능 (let을 object destruct  하기)\n //           results = request.data;\n\n        }else{\n//            ({data:results}=await tvApi.showDetail(intgerID));\n           const request = await tvApi.showDetail(intgerID);\n           results = request.data;\n        }\n        \n    } catch (error) {\n        this.setState({\n            error: \"Can't find movies information.\"\n          });\n    }finally{\n        this.setState({loading :false, results}); //results를 덮어쓴다.\n    }\n\n\n\n  }\n\n  render() {\n    const { results, error, loading } = this.state;\n    return <DetailPresenter results={results} error={error} loading={loading} />;\n  }\n}\n\n//아름이 안맞아서 개고생..results...\n\n","import React from \"react\";\nimport {\n  HashRouter as Router,  //Router 의 한 종류로, computer/science 이런식으로 페이지 라우팅이된다. HashRouter은 중간에#이들어감\n  Route,    //Route 하는 페이지\n  Redirect, //특정 주소로 접근하면 강제로 다른 설정한 페이지로 이동하게끔 만들어주는 녀석\n  Switch    //Router내에서 반드시 한개의 Route만 렌더링 되게끔 해주는 Routing 도구\n} from \"react-router-dom\";\n\n//Header은 페이지 이동과 무관하므로 Router 안에 넣되, <Switch> 밖에 넣어서 동시에 Rendering 되게끔 한다.\nimport Header from \"Components/Header\";\n//Routing 할 페이지들\nimport Home from \"Routes/Home\";\nimport TV from \"Routes/TV\";\nimport Search from \"Routes/Search\";\nimport Detail from \"Routes/Detail\"\n\n//compnent={Home} 을 하면 폴더내의 index.js가 default로 불려진다.\n\nexport default () => (\n  <Router>\n    <>\n      <Header />\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/tv\" component={TV} />\n        <Route path=\"/search\" component={Search} />\n        <Route path=\"/movie/:id\" component={Detail}/>\n        <Route path=\"/show/:id\" component={Detail} />\n        <Redirect from=\"*\" to=\"/\" />\n      </Switch>\n    </>\n  </Router>\n);","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\n\n\n//reset은 페이지가 새로고침 될때 적용할 수 있는 라이브러리이다. \n\nconst globalStyles = createGlobalStyle`\n    ${reset};\n    a{\n        text-decoration:none;\n        color:inherit;\n    }\n    *{\n        box-sizing:border-box;\n    }\n    body{\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n        font-size:12px;\n        background-color:rgba(20, 20, 20, 1);\n        color:white;\n        padding-top:50px;\n    }\n`;\n\nexport default globalStyles;","import React, { Component } from \"react\";\nimport Router from \"Components/Router\";\nimport GlobalStyles from \"Components/GlobalStyles\";\n\n\n\n//React Component를 상속받은 컴포넌트는 반드시 render()를 재정의해주어야한다.\n//Router 컴포넌트와 GlobalStyles를 차례로 실행한다.\n//Global Styles는 앞으로 React를 통해서 Rendering 할 모든 요소들에 대해 기본 CSS를 적용시켜주는 라이브러리이다.\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <Router />\n        <GlobalStyles />\n      </>\n    );\n  }\n}\n\nexport default App;","import React,{Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"Components/App\";\nimport \"./api\";\n\n//console.dir(Component);\n\n\n//ReactDOM, 즉 흔히 말하는 React는 APP Component를 실행한다. \n//프로젝트의 메인 html 파일은 비어있는데, 그 비어있는 html파일의 body에는 div root가있다. \n//React는 그 div root에 Rendering을 시작한다.\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root') //react\n);\n"],"sourceRoot":""}